type User {
  # Example field (placeholder)
  id: Int!
  email: String!
  password: String!
}

enum Status {
  OK
  ERROR
}

interface ReturnType {
  status: Status!
}
type UserReturnType implements ReturnType {
  status: Status!
  message: String!
}

input CreateUserInput {
  # Example field (placeholder)
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginReturnType implements ReturnType {
  status: Status!
  accessToken: String
  message: String
}

type Query {
  # user: [User]!
  user: User
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): UserReturnType
  login(loginInput: LoginInput): LoginReturnType!
  removeUser(id: Int!): User
}
